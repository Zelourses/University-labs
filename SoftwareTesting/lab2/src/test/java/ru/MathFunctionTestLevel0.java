package ru;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.mockito.Mockito.when;

class MathFunctionTestLevel0 {
    private final static double EPSILON = 0.00001;
    private final static double PERIOD = Math.PI*2;
    private final static double DELTA = 0.001;

    private static MathFunction func;

    @BeforeAll
    static void initMock(){
        MathThings mock = Mockito.mock(MathThings.class);
        double[] tan_q = { -6.283185307179586,  -1.393000000000000,  -2.314000000000000,  -3.528000000000000,  -3.838000000000000,  -4.016000000000000,  -5.626000000000000,  -6.150000000000000,  -6.283175307179587,  -6.283195307179586,  -12.566370614359172,  -1.392990000000000,  -1.393010000000000,  -7.676185307179586,  -2.313990000000000,  -2.314010000000000,  -8.597185307179586,  -3.527990000000000,  -3.528010000000000,  -9.811185307179587,  -3.837990000000000,  -3.838010000000000,  -10.121185307179587,  -4.015990000000000,  -4.016010000000000,  -10.299185307179586,  -5.625990000000001,  -5.626010000000000,  -11.909185307179587,  -6.149990000000001,  -6.150010000000000,  -12.433185307179587,  -0.000010000000000};
        double[] tan_a = { 0.000000000000000,  -5.565022441154583,  1.088161224533050,  -0.406861399590279,  -0.836165421842677,  -1.195980240650577,  0.771604640174179,  0.133978429924449,  0.000010000000000,  -0.000010000000000,  0.000000000000000,  -5.564702764196959,  -5.565342153694376,  -5.565022441154568,  1.088183065719224,  1.088139383822205,  1.088161224533050,  -0.406849744275715,  -0.406873054999685,  -0.406861399590279,  -0.836148430258627,  -0.836182413710884,  -0.836165421842678,  -1.195955937253881,  -1.196004544628608,  -1.195980240650577,  0.771620594034487,  0.771588686560070,  0.771604640174178,  0.133988609440284,  0.133968250435891,  0.133978429924450,  -0.000010000000000};

        double[] sec_q = { -6.283185307179586,  -1.393000000000000,  -2.314000000000000,  -3.528000000000000,  -3.838000000000000,  -4.016000000000000,  -5.626000000000000,  -6.150000000000000,  -6.283175307179587,  -6.283195307179586,  -12.566370614359172,  -1.392990000000000,  -1.393010000000000,  -7.676185307179586,  -2.313990000000000,  -2.314010000000000,  -8.597185307179586,  -3.527990000000000,  -3.528010000000000,  -9.811185307179587,  -3.837990000000000,  -3.838010000000000,  -10.121185307179587,  -4.015990000000000,  -4.016010000000000,  -10.299185307179586,  -5.625990000000001,  -5.626010000000000,  -11.909185307179587,  -6.149990000000001,  -6.150010000000000,  -12.433185307179587,  -0.000010000000000};
        double[] sec_a = { 1.000000000000000,  5.654155531160609,  -1.477868346835152,  -1.079600017819822,  -1.303523153873893,  -1.558963994461262,  1.263081042822797,  1.008935191023200,  1.000000000050000,  1.000000000050000,  1.000000000000000,  5.653840893928770,  5.654470203979110,  5.654155531160594,  -1.477884428674343,  -1.477852265493736,  -1.477868346835153,  -1.079595625415931,  -1.079604410367417,  -1.079600017819822,  -1.303512254420328,  -1.303534053640088,  -1.303523153873894,  -1.558945349860863,  -1.558982639663535,  -1.558963994461261,  1.263090788953088,  1.263071296969215,  1.263081042822796,  1.008936542830986,  1.008933839319930,  1.008935191023200,  1.000000000050000};

        double[] csc_q = { -6.283185307179586,  -1.393000000000000,  -2.314000000000000,  -3.528000000000000,  -3.838000000000000,  -4.016000000000000,  -5.626000000000000,  -6.150000000000000,  -6.283175307179587,  -6.283195307179586,  -12.566370614359172,  -1.392990000000000,  -1.393010000000000,  -7.676185307179586,  -2.313990000000000,  -2.314010000000000,  -8.597185307179586,  -3.527990000000000,  -3.528010000000000,  -9.811185307179587,  -3.837990000000000,  -3.838010000000000,  -10.121185307179587,  -4.015990000000000,  -4.016010000000000,  -10.299185307179586,  -5.625990000000001,  -5.626010000000000,  -11.909185307179587,  -6.149990000000001,  -6.150010000000000,  -12.433185307179587,  -0.000010000000000};
        double[] csc_a = { 4082809838298842.500000000000000,  -1.016016663175851,  -1.358133623507246,  2.653483517745873,  1.558929752202967,  1.303503136149835,  1.636953663909634,  7.530579299907756,  100000.000003003150000,  -100000.000007901720000,  2041404919149421.200000000000000,  -1.016018488948830,  -1.016014837511036,  -1.016016663175851,  -1.358121142693532,  -1.358146104686169,  -1.358133623507246,  2.653548737846345,  2.653418301116675,  2.653483517745872,  1.558948396299856,  1.558911108707907,  1.558929752202966,  1.303514035341860,  1.303492237270421,  1.303503136149835,  1.636932449338743,  1.636974879194112,  1.636953663909636,  7.530017268226406,  7.531141416247314,  7.530579299907743,  -100000.000001666660000};

        double[] log_2_q = { 1.000000000000000,  2.100000000000000,  4.000000000000000,  5.000000000000000,  10.000000000000000};
        double[] log_2_a = { 0.000000000000000,  1.070389327891398,  2.000000000000000,  2.321928094887362,  3.321928094887363};

        double[] ln_q = { 1.000000000000000,  2.100000000000000,  4.000000000000000,  5.000000000000000,  10.000000000000000};
        double[] ln_a = { 0.000000000000000,  0.741937344729377,  1.386294361119891,  1.609437912434100,  2.302585092994046};

        double[] cos_q = { -6.283185307179586,  -1.393000000000000,  -2.314000000000000,  -3.528000000000000,  -3.838000000000000,  -4.016000000000000,  -5.626000000000000,  -6.150000000000000,  -6.283175307179587,  -6.283195307179586,  -12.566370614359172,  -1.392990000000000,  -1.393010000000000,  -7.676185307179586,  -2.313990000000000,  -2.314010000000000,  -8.597185307179586,  -3.527990000000000,  -3.528010000000000,  -9.811185307179587,  -3.837990000000000,  -3.838010000000000,  -10.121185307179587,  -4.015990000000000,  -4.016010000000000,  -10.299185307179586,  -5.625990000000001,  -5.626010000000000,  -11.909185307179587,  -6.149990000000001,  -6.150010000000000,  -12.433185307179587,  -0.000010000000000};
        double[] cos_a = { 1.000000000000000,  0.176861070497425,  -0.676650259234184,  -0.926268973225316,  -0.767151697327459,  -0.641451632977306,  0.791714835467050,  0.991143939568469,  0.999999999950000,  0.999999999950000,  1.000000000000000,  0.176870912846844,  0.176851228130319,  0.176861070497425,  -0.676642896154604,  -0.676657622246098,  -0.676650259234183,  -0.926272741809911,  -0.926265204548095,  -0.926268973225316,  -0.767158111946328,  -0.767145282631876,  -0.767151697327459,  -0.641459304580017,  -0.641443961310450,  -0.641451632977306,  0.791708726519057,  0.791720944335871,  0.791714835467050,  0.991142611599823,  0.991145267438000,  0.991143939568469,  0.999999999950000};

        double[] sin_q = { -6.283185307179586,  -1.393000000000000,  -2.314000000000000,  -3.528000000000000,  -3.838000000000000,  -4.016000000000000,  -5.626000000000000,  -6.150000000000000,  -6.283175307179587,  -6.283195307179586,  -12.566370614359172,  -1.392990000000000,  -1.393010000000000,  -7.676185307179586,  -2.313990000000000,  -2.314010000000000,  -8.597185307179586,  -3.527990000000000,  -3.528010000000000,  -9.811185307179587,  -3.837990000000000,  -3.838010000000000,  -10.121185307179587,  -4.015990000000000,  -4.016010000000000,  -10.299185307179586,  -5.625990000000001,  -5.626010000000000,  -11.909185307179587,  -6.149990000000001,  -6.150010000000000,  -12.433185307179587,  -0.000010000000000};
        double[] sin_a = { 0.000000000000000,  -0.984235826284791,  -0.736304574668875,  0.376863090843503,  0.641465722613140,  0.767163478373904,  0.610890840741112,  0.132791908852517,  0.000010000000000,  -0.000009999999999,  0.000000000000000,  -0.984234057624874,  -0.984237594846284,  -0.984235826284791,  -0.736311341134652,  -0.736297808129467,  -0.736304574668875,  0.376853828134927,  0.376872353514392,  0.376863090843503,  0.641458051064094,  0.641473394098040,  0.641465722613141,  0.767157063819216,  0.767169892851875,  0.767163478373904,  0.610898757858922,  0.610882923562213,  0.610890840741111,  0.132801820285272,  0.132781997406482,  0.132791908852517,  -0.000010000000000};

        double[] cot_q = { -6.283185307179586,  -1.393000000000000,  -2.314000000000000,  -3.528000000000000,  -3.838000000000000,  -4.016000000000000,  -5.626000000000000,  -6.150000000000000,  -6.283175307179587,  -6.283195307179586,  -12.566370614359172,  -1.392990000000000,  -1.393010000000000,  -7.676185307179586,  -2.313990000000000,  -2.314010000000000,  -8.597185307179586,  -3.527990000000000,  -3.528010000000000,  -9.811185307179587,  -3.837990000000000,  -3.838010000000000,  -10.121185307179587,  -4.015990000000000,  -4.016010000000000,  -10.299185307179586,  -5.625990000000001,  -5.626010000000000,  -11.909185307179587,  -6.149990000000001,  -6.150010000000000,  -12.433185307179587,  -0.000010000000000};
        double[] cot_a = { 4082809838298842.500000000000000,  -0.179693794692502,  0.918981468420839,  -2.457839453452770,  -1.195935605416781,  -0.836134215274351,  1.296000500689400,  7.463888034543336,  99999.999998003140000,  -100000.000002901720000,  2041404919149421.200000000000000,  -0.179704117609651,  -0.179683471812453,  -0.179693794692503,  0.918963023320952,  0.918999913859743,  0.918981468420838,  -2.457909864931164,  -2.457769045435494,  -2.457839453452769,  -1.195959908327153,  -1.195911303087698,  -1.195935605416780,  -0.836151206620681,  -0.836117224212160,  -0.836134215274352,  1.295973704863696,  1.296027297209661,  1.296000500689402,  7.463320980621687,  7.464455173119844,  7.463888034543323,  -99999.999996666670000};

        double[] log_10_q = { 1.000000000000000,  2.100000000000000,  4.000000000000000,  5.000000000000000,  10.000000000000000};
        double[] log_10_a = { 0.000000000000000,  0.322219294733919,  0.602059991327962,  0.698970004336019,  1.000000000000000};

        double[] log_3_q = { 1.000000000000000,  2.100000000000000,  4.000000000000000,  5.000000000000000,  10.000000000000000};
        double[] log_3_a = { 0.000000000000000,  0.675340474872038,  1.261859507142915,  1.464973520717927,  2.095903274289385};

        double[] log_5_q = { 1.000000000000000,  2.100000000000000,  4.000000000000000,  5.000000000000000,  10.000000000000000};
        double[] log_5_a = { 0.000000000000000,  0.460991591534760,  0.861353116146786,  1.000000000000000,  1.430676558073393};

        for (int i=0;i<sin_a.length;i++){
            when(mock.sin(sin_q[i])).thenReturn(sin_a[i]);
            when(mock.cos(cos_q[i])).thenReturn(cos_a[i]);
            when(mock.tan(tan_q[i])).thenReturn(tan_a[i]);
            when(mock.cot(cot_q[i])).thenReturn(cot_a[i]);
            when(mock.sec(sec_q[i])).thenReturn(sec_a[i]);
            when(mock.csc(csc_q[i])).thenReturn(csc_a[i]);
        }
        for (int i = 0 ; i< ln_q.length;i++){
            when(mock.ln(ln_q[i])).thenReturn(ln_a[i]);
            when(mock.log_2(log_2_q[i])).thenReturn(log_2_a[i]);
            when(mock.log_3(log_3_q[i])).thenReturn(log_3_a[i]);
            when(mock.log_5(log_5_q[i])).thenReturn(log_5_a[i]);
            when(mock.log_10(log_10_q[i])).thenReturn(log_10_a[i]);
        }
        func = new MathFunction(mock);
    }

    @Test
    void testZeroX(){
        //Test zero
        Assertions.assertEquals(Double.NaN,func.lab2_func(0.0));
        Assertions.assertEquals(0.0001,func.lab2_func(0.0-EPSILON), DELTA);
    }

    @Test
    void checkNegativeExtremumFunctions() {
        //Check first negative point
        Assertions.assertEquals(12.998,func.lab2_func(-1.393),DELTA);
        Assertions.assertEquals(12.998,func.lab2_func(-1.393-EPSILON),DELTA);
        Assertions.assertEquals(12.998,func.lab2_func(-1.393+EPSILON),DELTA);
        Assertions.assertEquals(12.998,func.lab2_func(-1.393-PERIOD),DELTA);

        //Check third negative point
        Assertions.assertEquals(0.465,func.lab2_func(-3.528),DELTA);
        Assertions.assertEquals(0.465,func.lab2_func(-3.528+EPSILON),DELTA);
        Assertions.assertEquals(0.465,func.lab2_func(-3.528-EPSILON),DELTA);
        Assertions.assertEquals(0.465,func.lab2_func(-3.528-PERIOD),DELTA);

        //Check fourth negative point
        Assertions.assertEquals(1.11,func.lab2_func(-3.838),DELTA);
        Assertions.assertEquals(1.11,func.lab2_func(-3.838+EPSILON),DELTA);
        Assertions.assertEquals(1.11,func.lab2_func(-3.838-EPSILON),DELTA);
        Assertions.assertEquals(1.11,func.lab2_func(-3.838-PERIOD),DELTA);

        //Check sixth negative point
        Assertions.assertEquals(-0.504,func.lab2_func(-6.15),DELTA);
        Assertions.assertEquals(-0.504,func.lab2_func(-6.15+EPSILON),DELTA);
        Assertions.assertEquals(-0.504,func.lab2_func(-6.15-EPSILON),DELTA);
        Assertions.assertEquals(-0.504,func.lab2_func(-6.15-PERIOD),DELTA);


        /*System.out.println(func.t.sin(0.0-EPSILON));
        System.out.println(func.t.cos(0.0-EPSILON));
        System.out.println(func.t.tan(0.0-EPSILON));
        System.out.println(func.t.cot(0.0-EPSILON));
        System.out.println(func.t.sec(0.0-EPSILON));
        System.out.println(func.t.csc(0.0-EPSILON));*/

    }

    @Test
    void checkNegativeZeroes(){
        //Check second negative point
        Assertions.assertEquals(0.0,func.lab2_func(-2.314),DELTA);
        Assertions.assertEquals(0.0,func.lab2_func(-2.314+EPSILON),DELTA);
        Assertions.assertEquals(0.0,func.lab2_func(-2.314-EPSILON),DELTA);
        Assertions.assertEquals(0.0,func.lab2_func(-2.314-PERIOD),DELTA);

        //Check fifth negative point
        Assertions.assertEquals(0.004,func.lab2_func(-4.016),DELTA);
        Assertions.assertEquals(0.004,func.lab2_func(-4.016+EPSILON),DELTA);
        Assertions.assertEquals(0.004,func.lab2_func(-4.016-EPSILON),DELTA);
        Assertions.assertEquals(0.004,func.lab2_func(-4.016-PERIOD),DELTA);

        //Check sixth negative point
        Assertions.assertEquals(0.0,func.lab2_func(-5.626),DELTA);
        Assertions.assertEquals(0.0,func.lab2_func(-5.626+EPSILON),DELTA);
        Assertions.assertEquals(0.0,func.lab2_func(-5.626-EPSILON),DELTA);
        Assertions.assertEquals(0.0,func.lab2_func(-5.626-PERIOD),DELTA);

    }

    @Test
    void checkPositiveZeroes(){
        //Check third positive point
        Assertions.assertEquals(0,func.lab2_func(4),DELTA);

        //Check fourth positive point
        Assertions.assertEquals(0,func.lab2_func(5),DELTA);
    }

    @Test
    void checkPositivePoints(){

        //Check first positive point
        Assertions.assertEquals(Double.NaN,func.lab2_func(1),DELTA);

        //Check second positive point
        Assertions.assertEquals(-1.526,func.lab2_func(2.1),DELTA);
    }
}