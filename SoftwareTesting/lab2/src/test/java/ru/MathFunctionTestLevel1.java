package ru;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.mockito.Mockito.when;

public class MathFunctionTestLevel1 {
    private final static double EPSILON = 0.00001;
    private final static double PERIOD = Math.PI*2;
    private final static double DELTA = 0.001;

    private static MathFunction func;

    @BeforeAll
    static void initMock(){
        BasicMath mock = Mockito.mock(BasicMath.class);

        double[] ln_q = { 1.000000000000000,  10.000000000000000,  5.000000000000000,  2.000000000000000,  3.000000000000000,  2.100000000000000,  4.000000000000000};
        double[] ln_a = { 0.000000000000000,  2.302585092994046,  1.609437912434100,  0.693147180559945,  1.098612288668110,  0.741937344729377,  1.386294361119891};

        double[] sin_q = { -4.712388980384690000000000000000,  -6.283185307179586000000000000000,  0.177796326794896540000000000000,  -1.393000000000000000000000000000,  -0.743203673205103500000000000000,  -2.314000000000000000000000000000,  -1.957203673205103500000000000000,  -3.528000000000000000000000000000,  -2.267203673205103500000000000000,  -3.838000000000000000000000000000,  -2.445203673205103500000000000000,  -4.016000000000000000000000000000,  -4.055203673205104000000000000000,  -5.626000000000000000000000000000,  -4.579203673205104000000000000000,  -6.150000000000000000000000000000,  -4.712378980384690000000000000000,  -6.283175307179587000000000000000,  -4.712398980384689000000000000000,  -6.283195307179586000000000000000,  -10.995574287564276000000000000000,  -12.566370614359172000000000000000,  0.177806326794896600000000000000,  -1.392990000000000000000000000000,  0.177786326794896480000000000000,  -1.393010000000000000000000000000,  -6.105388980384689500000000000000,  -7.676185307179586000000000000000,  -0.743193673205103400000000000000,  -2.313990000000000000000000000000,  -0.743213673205103600000000000000,  -2.314010000000000000000000000000,  -7.026388980384690000000000000000,  -8.597185307179586000000000000000,  -1.957193673205103400000000000000,  -3.527990000000000000000000000000,  -1.957213673205103500000000000000,  -3.528010000000000000000000000000,  -8.240388980384690000000000000000,  -9.811185307179587000000000000000,  -2.267193673205103500000000000000,  -3.837990000000000000000000000000,  -2.267213673205103600000000000000,  -3.838010000000000000000000000000,  -8.550388980384690000000000000000,  -10.121185307179587000000000000000,  -2.445193673205104000000000000000,  -4.015990000000000000000000000000,  -2.445213673205103000000000000000,  -4.016010000000000000000000000000,  -8.728388980384690000000000000000,  -10.299185307179586000000000000000,  -4.055193673205104000000000000000,  -5.625990000000001000000000000000,  -4.055213673205103000000000000000,  -5.626010000000000000000000000000,  -10.338388980384691000000000000000,  -11.909185307179587000000000000000,  -4.579193673205104000000000000000,  -6.149990000000001000000000000000,  -4.579213673205103000000000000000,  -6.150010000000000000000000000000,  -10.862388980384690000000000000000,  -12.433185307179587000000000000000,  1.570786326794896500000000000000,  -0.000010000000000000000000000000};
        double[] sin_a = { 1.000000000000000000000000000000,  0.000000000000000244929359829471,  0.176861070497424580000000000000,  -0.984235826284790900000000000000,  -0.676650259234183500000000000000,  -0.736304574668874600000000000000,  -0.926268973225316300000000000000,  0.376863090843502670000000000000,  -0.767151697327459200000000000000,  0.641465722613140400000000000000,  -0.641451632977305900000000000000,  0.767163478373904100000000000000,  0.791714835467049700000000000000,  0.610890840741111900000000000000,  0.991143939568469000000000000000,  0.132791908852516740000000000000,  0.999999999950000000000000000000,  0.000009999999999699685000000000,  0.999999999950000000000000000000,  -0.000009999999999209827000000000,  1.000000000000000000000000000000,  0.000000000000000489858719658941,  0.176870912846844280000000000000,  -0.984234057624874100000000000000,  0.176851228130318780000000000000,  -0.984237594846284000000000000000,  0.176861070497425050000000000000,  -0.984235826284790800000000000000,  -0.676642896154604400000000000000,  -0.736311341134651600000000000000,  -0.676657622246097700000000000000,  -0.736297808129467000000000000000,  -0.676650259234183400000000000000,  -0.736304574668874700000000000000,  -0.926272741809911300000000000000,  0.376853828134927350000000000000,  -0.926265204548094500000000000000,  0.376872353514391700000000000000,  -0.926268973225316300000000000000,  0.376863090843502830000000000000,  -0.767158111946327800000000000000,  0.641458051064093800000000000000,  -0.767145282631875500000000000000,  0.641473394098040300000000000000,  -0.767151697327458800000000000000,  0.641465722613140800000000000000,  -0.641459304580016700000000000000,  0.767157063819216400000000000000,  -0.641443961310450000000000000000,  0.767169892851875300000000000000,  -0.641451632977306000000000000000,  0.767163478373904000000000000000,  0.791708726519056800000000000000,  0.610898757858921700000000000000,  0.791720944335870900000000000000,  0.610882923562213200000000000000,  0.791714835467050000000000000000,  0.610890840741111400000000000000,  0.991142611599823300000000000000,  0.132801820285272270000000000000,  0.991145267438000200000000000000,  0.132781997406482000000000000000,  0.991143939568468900000000000000,  0.132791908852516960000000000000,  0.999999999950000000000000000000,  -0.000009999999999833334000000000};

        for (int i=0;i<sin_q.length;i++){
            when(mock.innerSin(sin_q[i])).thenReturn(sin_a[i]);
        }

        for (int i=0;i<ln_q.length;i++){
            when(mock.innerLn(ln_q[i])).thenReturn(ln_a[i]);
        }

        func = new MathFunction(new MathThings(mock));
    }

    @Test
    void testZeroX(){
        //Test zero
        Assertions.assertEquals(Double.NaN,func.lab2_func(0.0));
        Assertions.assertEquals(0.0001,func.lab2_func(0.0-EPSILON), DELTA);
    }

    @Test
    void checkNegativeExtremumFunctions() {
        //Check first negative point
        Assertions.assertEquals(12.998,func.lab2_func(-1.393),DELTA);
        Assertions.assertEquals(12.998,func.lab2_func(-1.393-EPSILON),DELTA);
        Assertions.assertEquals(12.998,func.lab2_func(-1.393+EPSILON),DELTA);
        Assertions.assertEquals(12.998,func.lab2_func(-1.393-PERIOD),DELTA);

        //Check third negative point
        Assertions.assertEquals(0.465,func.lab2_func(-3.528),DELTA);
        Assertions.assertEquals(0.465,func.lab2_func(-3.528+EPSILON),DELTA);
        Assertions.assertEquals(0.465,func.lab2_func(-3.528-EPSILON),DELTA);
        Assertions.assertEquals(0.465,func.lab2_func(-3.528-PERIOD),DELTA);

        //Check fourth negative point
        Assertions.assertEquals(1.11,func.lab2_func(-3.838),DELTA);
        Assertions.assertEquals(1.11,func.lab2_func(-3.838+EPSILON),DELTA);
        Assertions.assertEquals(1.11,func.lab2_func(-3.838-EPSILON),DELTA);
        Assertions.assertEquals(1.11,func.lab2_func(-3.838-PERIOD),DELTA);

        //Check sixth negative point
        Assertions.assertEquals(-0.504,func.lab2_func(-6.15),DELTA);
        Assertions.assertEquals(-0.504,func.lab2_func(-6.15+EPSILON),DELTA);
        Assertions.assertEquals(-0.504,func.lab2_func(-6.15-EPSILON),DELTA);
        Assertions.assertEquals(-0.504,func.lab2_func(-6.15-PERIOD),DELTA);

    }

    @Test
    void checkNegativeZeroes(){
        //Check second negative point
        Assertions.assertEquals(0.0,func.lab2_func(-2.314),DELTA);
        Assertions.assertEquals(0.0,func.lab2_func(-2.314+EPSILON),DELTA);
        Assertions.assertEquals(0.0,func.lab2_func(-2.314-EPSILON),DELTA);
        Assertions.assertEquals(0.0,func.lab2_func(-2.314-PERIOD),DELTA);

        //Check fifth negative point
        Assertions.assertEquals(0.004,func.lab2_func(-4.016),DELTA);
        Assertions.assertEquals(0.004,func.lab2_func(-4.016+EPSILON),DELTA);
        Assertions.assertEquals(0.004,func.lab2_func(-4.016-EPSILON),DELTA);
        Assertions.assertEquals(0.004,func.lab2_func(-4.016-PERIOD),DELTA);

        //Check sixth negative point
        Assertions.assertEquals(0.0,func.lab2_func(-5.626),DELTA);
        Assertions.assertEquals(0.0,func.lab2_func(-5.626+EPSILON),DELTA);
        Assertions.assertEquals(0.0,func.lab2_func(-5.626-EPSILON),DELTA);
        Assertions.assertEquals(0.0,func.lab2_func(-5.626-PERIOD),DELTA);

    }

    @Test
    void checkPositiveZeroes(){
        //Check third positive point
        Assertions.assertEquals(0,func.lab2_func(4),DELTA);

        //Check fourth positive point
        Assertions.assertEquals(0,func.lab2_func(5),DELTA);
    }

    @Test
    void checkPositivePoints(){

        //Check first positive point
        Assertions.assertEquals(Double.NaN,func.lab2_func(1),DELTA);

        //Check second positive point
        Assertions.assertEquals(-1.526,func.lab2_func(2.1),DELTA);
    }

}
