/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package code.UI;

import code.ApproximateFunctions.Approximation;
import code.ApproximateFunctions.LinearApproximation;
import code.ApproximateFunctions.LnApproximation;
import code.ApproximateFunctions.modes;
import code.PointHandling.Pair;
import code.PointHandling.Point;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.geom.Ellipse2D;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;

/**
 *
 * @author iljab
 */
public class mainFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public mainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        initGraph();

        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PointTable = new ReworkedPointTable(
                new Object [][] {

        },
                new String [] {
                        "X", "Y"
        });
        jLabel12 = new javax.swing.JLabel();
        xFirst = new javax.swing.JLabel();
        xSecond = new javax.swing.JLabel();
        deleteChosenPoints = new javax.swing.JButton();
        xInput = new javax.swing.JTextField();
        xThird = new javax.swing.JLabel();
        yFirst = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        ySecond = new javax.swing.JLabel();
        yInput = new javax.swing.JTextField();
        yThird = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FunctionList = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        approximateButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        deleteAllPoints = new javax.swing.JButton();
        addPoint = new javax.swing.JButton();
        readFromFile = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        //edited
        jPanel1.add(Panel,BorderLayout.CENTER);
        //endedited

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel11.setText("Y:");

        PointTable.setAutoCreateRowSorter(true);
        //deleted
       /* PointTable.setModel(new javax.swing.table.DefaultTableModel(

        ) {
            Class[] types = new Class [] {
                    java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });*/
        PointTable.setColumnSelectionAllowed(true);
        PointTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(PointTable);

        jLabel12.setText("Y:");

        xFirst.setText(" ");

        xSecond.setText(" ");

        deleteChosenPoints.setText("Удалить выделенные точки");

        xInput.setToolTipText("Введите X");
        xInput.setName("");


        xThird.setText(" ");

        yFirst.setText(" ");

        jLabel1.setText("X:");

        ySecond.setText(" ");

        yInput.setToolTipText("Введите Y");

        yThird.setText(" ");

        jLabel2.setText("Y:");

        FunctionList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "y=a*x+b", "y=a*ln(x)+b"}));

        jLabel3.setText("Функция");

        jLabel4.setText("Значения коэффициентов для аппроксимации со всеми точками: ");

        approximateButton.setText("Аппроксимировать");

        jLabel5.setText("Значения коэффициентов для аппроксимации со всеми точками кроме самой отклоняющейся: ");

        jLabel6.setText("Значения координат самой отклоняющейся точки: ");

        deleteAllPoints.setText("Удалить все точки");

        addPoint.setText("Добавить точку");

        readFromFile.setText("Прочитать из файла");

        jLabel7.setText("X:");

        jLabel8.setText("X:");

        jLabel9.setText("X:");

        jLabel10.setText("Y:");

       /* javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );*/

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(jLabel4)
                                                                        .addComponent(jLabel5)
                                                                        .addComponent(jLabel6))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel8)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(xSecond, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel9)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(xThird, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel7)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(xFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel11)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(ySecond, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel10)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(yFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel12)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(yThird, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGap(5, 5, 5))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                        .addComponent(readFromFile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(deleteAllPoints, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(deleteChosenPoints, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(207, 207, 207)
                                                                                .addComponent(addPoint))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(46, 46, 46)
                                                                                .addComponent(jLabel1)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(xInput, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(jLabel2)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(yInput, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(30, 30, 30)
                                                                                .addComponent(jLabel3)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(FunctionList, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(approximateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(deleteChosenPoints)
                                        .addComponent(xInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1)
                                        .addComponent(yInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2)
                                        .addComponent(FunctionList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3)
                                        .addComponent(approximateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(deleteAllPoints)
                                        .addComponent(addPoint))
                                .addGap(18, 18, 18)
                                .addComponent(readFromFile)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel10)
                                        .addComponent(xFirst)
                                        .addComponent(yFirst))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel11)
                                        .addComponent(xSecond)
                                        .addComponent(ySecond))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel12)
                                        .addComponent(xThird)
                                        .addComponent(yThird))
                                .addContainerGap())
        );
        this.setTitle("Аппроксимация методом наименьших квадратов");
        initButtons();
        pack();

    }// </editor-fold>

    private void initButtons(){
        addPoint.addActionListener(action ->{
            double x,y;
            try {
                x = Double.parseDouble(xInput.getText().replace(',','.'));
            }catch (NumberFormatException e){
                JOptionPane.showMessageDialog(this,"Неверная координата x","ошибка",JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                y = Double.parseDouble(yInput.getText().replace(',','.'));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this,"Неверная координата y","ошибка",JOptionPane.ERROR_MESSAGE);
                return;
            }
            pointList.add(new Point(x,y));
            PointTable.addRow(new Object[]{x,y});
            xInput.setText("");
            yInput.setText("");
        });
        deleteChosenPoints.addActionListener(action ->{
            Vector v = PointTable.getTableModel().getDataVector();
            int[] selectedRows = PointTable.getSelectedRows();
            if (selectedRows.length ==0){
                JOptionPane.showMessageDialog(this, "Выделите точки, которые вы хотите удалить, в таблице", "ошибка", JOptionPane.ERROR_MESSAGE);
            }
            Arrays.sort(selectedRows);
            for (int i = selectedRows.length - 1; i >= 0; --i)
                try {
                    pointList.remove(new Point(((Double) ((Vector) (v.elementAt(selectedRows[i]))).elementAt(0)),
                            ((Double) ((Vector) (v.elementAt(selectedRows[i]))).elementAt(1))));
                    PointTable.removeRow(selectedRows[i]);
                } catch (Exception ignore) {
            }
            jScrollPane1.revalidate();
        });
        deleteAllPoints.addActionListener(action->{
            for (int i = PointTable.getRowCount(); i > 0; --i)
                PointTable.removeRow(0);
            pointList.clear();
        });

        readFromFile.addActionListener(ation ->{
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle("Выберите файл");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setFileFilter(new FileNameExtensionFilter("txt","txt"));
            int result = chooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION){
                File file = chooser.getSelectedFile();
                try {
                    List<String> fileLines = Files.readAllLines(file.toPath());
                    String[] tmp = new String[fileLines.size()];
                    fileLines.toArray(tmp);
                    for (int i =0; i<tmp.length;i++){
                        String xAndy[] = tmp[i].trim().replaceAll(",",".")
                                .replaceAll("\n","")
                                .replaceAll("\t","")
                                .split(" ");
                        if (xAndy.length >2) {
                            JOptionPane
                                    .showMessageDialog(
                                        this, "Неправильный формат файла. " +
                                                    "На каждой строке должно быть только 2 числа-" +
                                                    " x и y соответсвтенно",
                                                    "ошибка", JOptionPane.ERROR_MESSAGE);
                            return;
                        }

                        double x,y;
                        try {
                            x = Double.parseDouble(xAndy[0]);
                        }catch (NumberFormatException e){
                            JOptionPane.showMessageDialog(this,
                                    "Неверная координата x","ошибка",JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        try {
                            y = Double.parseDouble(xAndy[1]);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this,
                                    "Неверная координата y","ошибка",JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        pointList.add(new Point(x,y));
                        PointTable.addRow(new Object[]{x,y});
                    }

                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        approximateButton.setBackground(new Color(0, 255, 14));
        approximateButton.addActionListener(action ->{
            if (pointList.size() < 3){
                JOptionPane.showMessageDialog(this, "Для аппроксимации функции" +
                        " надо ввести 3 точки", "ошибка", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Pair<Pair<Double, Double>, Point> oldCoefficients;
            Pair<Double, Double> newCoefficients;
            Approximation approximation = null;
            int n =FunctionList.getSelectedIndex();
            if (n == 1 && pointList.stream().map(Point::getX).anyMatch(x -> x <= 0)) {
                JOptionPane.showMessageDialog(this,
                        "Некоторые точки не входят в область определения функции (x > 0)",
                        "ошибка", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (n == 2 && pointList.stream().map(Point::getY).anyMatch(y -> y <= 0)) {
                JOptionPane.showMessageDialog(this,
                        "Некоторые точки не входят в область определения функции (y > 0)",
                        "ошибка", JOptionPane.ERROR_MESSAGE);
                return;
            }
            modes m;
            switch (n){
                case 0:
                    m = modes.LINEAR;
                    approximation = new LinearApproximation();
                break;
                case 1:
                    m = modes.EXPONENTIAL;
                    approximation = new LnApproximation();
                break;
                default:
                    m = modes.INITIATE;
                    System.out.println("Wow, how you chosen this");
                return;
            }

                List<Point> wrongPoints = hasDuplicates(pointList);
               if (wrongPoints.size()==0){
                   oldCoefficients = approximation.approximateReturnWorstPoint(pointList);
                   xFirst.setText(oldCoefficients.getFirst().getFirst().toString());
                   yFirst.setText(oldCoefficients.getFirst().getSecond().toString());
                   List<Point> points = new ArrayList<>(pointList);
                   points.remove(oldCoefficients.getSecond());
                   xThird.setText(Double.toString(oldCoefficients.getSecond().getX()));
                   yThird.setText(Double.toString(oldCoefficients.getSecond().getY()));
                   newCoefficients = approximation.approximate(points);
                   xSecond.setText(newCoefficients.getFirst().toString());
                   ySecond.setText(newCoefficients.getSecond().toString());
                   buildDataset(m,oldCoefficients.getFirst(),newCoefficients,oldCoefficients.getSecond());
               }else {
                StringBuilder builder = new StringBuilder();
                for (int i=0; i<wrongPoints.size();i++){
                    Point tmp =wrongPoints.get(i);
                    builder.append("X: "+tmp.getX()+" Y:"+tmp.getY()+" повторяется\n");
                }
                JOptionPane.showMessageDialog(this, "Внимание! Некоторые точки находятся в" +
                        " одном и том же месте! \n"+builder.toString(), "ошибка", JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    private List<Point> hasDuplicates(List<Point>list){
        List<Point> wrongPoints = new ArrayList<>();
        for (int i = 0; i<list.size();i++){
            Point firstPoint = list.get(i);
            for (int j =i+1; j<list.size();j++){
                Point secondPoint = list.get(j);
                if (firstPoint.getX() == secondPoint.getX()
                    && firstPoint.getY() == secondPoint.getY()){
                    wrongPoints.add(firstPoint);
                }
            }
        }
        return wrongPoints;
    }

    private void initGraph(){
        Panel = new ChartPanel(buildChart(buildDataset(modes.INITIATE,null,null,null)));
        Panel.setPreferredSize(new Dimension(876,516));
    }

    private XYDataset buildDataset(modes mode, Pair<Double,Double> oldK, Pair<Double,Double> newK, Point badPoint){
        dataset.removeAllSeries();
        points.clear();
        ApproxFunc.clear();
        ApproxFuncWithoutBadPoint.clear();
        this.badPoint.clear();

        if (oldK == null || newK ==null)
            return dataset;

        this.badPoint.add(badPoint.getX(),badPoint.getY());
        double minBounds =pointList.stream().mapToDouble(Point::getX).min().getAsDouble();
        double maxBounds =pointList.stream().mapToDouble(Point::getX).max().getAsDouble();
        int steps = 500;
        double dx = maxBounds / steps - minBounds / steps;
        double oldA = oldK.getFirst();
        double oldB = oldK.getSecond();
        double newA = newK.getFirst();
        double newB = newK.getSecond();
        double koefOfBound = 30;
        switch (mode){
            case INITIATE:
            break;

            case LINEAR:
                System.out.println("Мы попали сюда");
                for (double x = minBounds - steps * dx / koefOfBound; x <= minBounds; x += dx)
                    ApproxFunc.add(x, oldA * x + oldB);
                for (double x = minBounds; x <= maxBounds; x += dx) {
                    ApproxFunc.add(x, oldA * x + oldB);
                    ApproxFuncWithoutBadPoint.add(x, newA * x + newB);
                }
                for (double x = maxBounds; x <= maxBounds + steps * dx / koefOfBound; x += dx)
                    ApproxFuncWithoutBadPoint.add(x, newA * x + newB);
            break;

            case EXPONENTIAL:
                for (double x = minBounds - steps * dx / koefOfBound; x <= minBounds; x += dx)
                    ApproxFunc.add(x, oldA * Math.log(x) + oldB);
                for (double x = minBounds; x <= maxBounds; x += dx) {
                    ApproxFunc.add(x, oldA * Math.log(x) + oldB);
                    ApproxFuncWithoutBadPoint.add(x, newA * Math.log(x) + newB);
                }
                for (double x = maxBounds; x <= maxBounds + steps * dx / koefOfBound; x += dx)
                    ApproxFuncWithoutBadPoint.add(x, newA * Math.log(x) + newB);
                break;
        }
        if (mode !=modes.INITIATE){
            pointList.forEach(x -> points.add(x.getX(),x.getY()));
            dataset.addSeries(this.badPoint);
            dataset.addSeries(points);
            dataset.addSeries(ApproxFunc);
            dataset.addSeries(ApproxFuncWithoutBadPoint);

        }
        return dataset;
    }


    private JFreeChart buildChart(XYDataset dataset){
        JFreeChart chart = ChartFactory.createXYLineChart(
            null,
                "X",
                "Y",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                false,
                false
        );
        //chart.setBackgroundPaint(Color.white);
        XYPlot plot = chart.getXYPlot();

        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesLinesVisible(0, false);
        renderer.setSeriesShapesVisible(2, false);
        renderer.setSeriesShapesVisible(3, false);
        renderer.setSeriesLinesVisible(1, false);


        final double ellipseRadius = 5;
        renderer.setSeriesShape(0,
                new Ellipse2D.Double(-ellipseRadius / 2, -ellipseRadius / 2, ellipseRadius, ellipseRadius));
        renderer.setSeriesShape(1,
                new Ellipse2D.Double(-ellipseRadius / 2, -ellipseRadius / 2, ellipseRadius, ellipseRadius));
        plot.setRenderer(renderer);

        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        return chart;
    }


    public static void start() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JComboBox<String> FunctionList;
    private ReworkedPointTable PointTable;
    private javax.swing.JButton addPoint;
    private javax.swing.JButton approximateButton;
    private javax.swing.JButton deleteAllPoints;
    private javax.swing.JButton deleteChosenPoints;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton readFromFile;
    private javax.swing.JLabel xFirst;
    private javax.swing.JTextField xInput;
    private javax.swing.JLabel xSecond;
    private javax.swing.JLabel xThird;
    private javax.swing.JLabel yFirst;
    private javax.swing.JTextField yInput;
    private javax.swing.JLabel ySecond;
    private javax.swing.JLabel yThird;

    private ChartPanel Panel;
    private  List<Point> pointList = new ArrayList<>();
    private  XYSeries points = new XYSeries("Точки");
    private final XYSeriesCollection dataset = new XYSeriesCollection();
    private XYSeries ApproxFunc= new XYSeries("Аппроксимирующая функция");
    private XYSeries ApproxFuncWithoutBadPoint=
            new XYSeries("Аппроксимирующая функция без наиболее отклоняющейся точки");
    private XYSeries badPoint = new XYSeries("Самая отклонаяющася точка");
    // End of variables declaration
}
